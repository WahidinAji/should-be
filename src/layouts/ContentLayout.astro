---
import Layout from "./Layout.astro";
import {
	languages,
	defaultLanguage,
	baseLanguageButtonClass,
	activeLanguageButtonClass,
	inactiveLanguageButtonClass,
	getLocalizedString,
	type LanguageCode,
} from "../common";

const { frontmatter } = Astro.props;
const inputId = `heading-filter-input-${Math.random().toString(36).slice(2, 8)}`;

const localized = getLocalizedString;

const localizedTitle: Record<LanguageCode, string> = {
	id: frontmatter.title ?? "Tanpa judul",
	en: frontmatter.title_en ?? frontmatter.title ?? "Untitled",
};
const localizedDescription: Record<LanguageCode, string> = {
	id: frontmatter.description ?? "",
	en: frontmatter.description_en ?? frontmatter.description ?? "",
};
const toggleLabel: Record<LanguageCode, string> = {
	id: "Bahasa",
	en: "Language",
};

const languageToggleData = JSON.stringify({
	languages,
	defaultLanguage,
	title: localizedTitle,
	description: localizedDescription,
	copy: { languageToggleLabel: toggleLabel },
	buttonClasses: {
		base: baseLanguageButtonClass,
		active: activeLanguageButtonClass,
		inactive: inactiveLanguageButtonClass,
	},
}).replace(/</g, "\\u003c");
---

<Layout title={localized(localizedTitle)}>
  <main class="mt-20 min-h-screen w-full flex flex-col items-center">
    <section class="w-full max-w-5xl">
      <div class="flex justify-between">
        <a
          href="/"
          class="flex justify-start text-sm font-medium text-blue-600 transition hover:text-blue-700"
        >
          ‚Üê Back
        </a>
        <div class="flex flex-col items-start gap-1 sm:items-end">
          <span
            class="text-xs uppercase tracking-wide text-gray-400"
            data-i18n-language-label
          >
            {localized(toggleLabel)}
          </span>
          <div
            id="content-language-toggle"
            class="inline-flex items-center gap-2 rounded-full bg-gray-100 p-1 sm:bg-transparent"
            data-default-language={defaultLanguage}
            data-active-class={activeLanguageButtonClass}
            data-inactive-class={inactiveLanguageButtonClass}
          >
            {
              languages.map((lang) => {
                const isActive = lang.code === defaultLanguage;
                return (
                  <button
                    type="button"
                    data-lang={lang.code}
                    data-base-class={baseLanguageButtonClass}
                    class={`${baseLanguageButtonClass} ${
                      isActive
                        ? activeLanguageButtonClass
                        : inactiveLanguageButtonClass
                    }`}
                    aria-pressed={isActive}
                  >
                    {lang.label}
                  </button>
                );
              })
            }
          </div>
        </div>
      </div>
      <div
        class="mt-4 w-full rounded-lg border border-gray-200 bg-white p-8 shadow-sm"
      >
        <div class="flex flex-col gap-6">
          <header
            class="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between"
          >
            <div class="flex-1">
              <h1 class="text-3xl font-semibold text-gray-900" data-i18n-title>
                {localized(localizedTitle)}
              </h1>
              {
                localized(localizedDescription).trim().length ? (
                  <p class="mt-2 text-base text-gray-600" data-i18n-description>
                    {localized(localizedDescription)}
                  </p>
                ) : null
              }
            </div>
            <!-- <div class="flex flex-col items-start gap-1 sm:items-end">
              <span class="text-xs uppercase tracking-wide text-gray-400" data-i18n-language-label>
                {localized(toggleLabel)}
              </span>
              <div
                id="content-language-toggle"
                class="inline-flex items-center gap-2 rounded-full bg-gray-100 p-1 sm:bg-transparent"
                data-default-language={defaultLanguage}
                data-active-class={activeLanguageButtonClass}
                data-inactive-class={inactiveLanguageButtonClass}
              >
                {
                  languages.map((lang) => {
                    const isActive = lang.code === defaultLanguage;
                    return (
                      <button
                        type="button"
                        data-lang={lang.code}
                        data-base-class={baseLanguageButtonClass}
                        class={`${baseLanguageButtonClass} ${
                          isActive
                            ? activeLanguageButtonClass
                            : inactiveLanguageButtonClass
                        }`}
                        aria-pressed={isActive}
                      >
                        {lang.label}
                      </button>
                    );
                  })
                }
              </div>
            </div> -->
          </header>

          <div class="heading-filter" data-target=".markdown-body">
            <button
              type="button"
              class="heading-filter__toggle"
              aria-expanded="false"
            >
              <span>Filter headings</span>
              <svg
                aria-hidden="true"
                class="heading-filter__icon"
                viewBox="0 0 16 16"
              >
                <path
                  fill="currentColor"
                  d="M1.75 2a.75.75 0 0 0 0 1.5h12.5a.75.75 0 0 0 0-1.5Zm3 4a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5Zm3 4a.75.75 0 0 0 0 1.5h.5a.75.75 0 0 0 0-1.5Z"
                ></path>
              </svg>
            </button>
            <div class="heading-filter__panel" hidden>
              <label class="sr-only" for={inputId}> Filter headings </label>
              <input
                id={inputId}
                data-heading-filter-input
                type="search"
                placeholder="Filter headings"
                class="heading-filter__search"
                autocomplete="off"
              />
              <ul
                class="heading-filter__list"
                role="listbox"
                aria-label="Markdown headings"
              >
              </ul>
            </div>
          </div>
          <article class="markdown-body">
            <slot />
          </article>
        </div>
      </div>
    </section>
  </main>
  <script is:inline>
    (() => {
      const filters = Array.from(document.querySelectorAll(".heading-filter"));

      filters.forEach((filter, filterIndex) => {
        const button = filter.querySelector(".heading-filter__toggle");
        const panel = filter.querySelector(".heading-filter__panel");
        const searchInput = filter.querySelector("[data-heading-filter-input]");
        const list = filter.querySelector(".heading-filter__list");
        const selector = filter.getAttribute("data-target") ?? ".markdown-body";
        const scope =
          filter.closest("section")?.querySelector(selector) ??
          document.querySelector(selector);

        if (!button || !panel || !searchInput || !list || !scope) {
          return;
        }

        const headings = Array.from(
          scope.querySelectorAll("h1, h2, h3, h4, h5, h6"),
        ).filter(
          (heading) => heading.textContent && heading.textContent.trim().length,
        );

        if (!headings.length) {
          button.disabled = true;
          button.setAttribute("aria-disabled", "true");
          filter.classList.add("heading-filter--empty");
          return;
        }

        const ensureId = (heading, fallbackIndex) => {
          if (heading.id) return heading.id;
          const base = (
            heading.textContent ?? `heading-${filterIndex}-${fallbackIndex}`
          )
            .trim()
            .toLowerCase()
            .replace(/[^a-z0-9\s-]/g, "")
            .replace(/\s+/g, "-");
          let candidate = base || `heading-${filterIndex}-${fallbackIndex}`;
          let counter = 1;
          while (document.getElementById(candidate)) {
            candidate = `${base}-${counter}`;
            counter += 1;
          }
          heading.id = candidate;
          heading.setAttribute("tabindex", "-1");
          return heading.id;
        };

        const items = headings.map((heading, headingIndex) => {
          const level = Number(heading.tagName.slice(1));
          const prefix = "#".repeat(Math.max(1, level));
          const text = heading.textContent?.trim() ?? "";
          const id = ensureId(heading, headingIndex);

          const item = document.createElement("li");
          item.className = "heading-filter__item";
          item.setAttribute("role", "option");
          item.dataset.search = `${prefix} ${text}`.toLowerCase();

          const resultButton = document.createElement("button");
          resultButton.type = "button";
          resultButton.className = "heading-filter__result";
          resultButton.dataset.level = String(level);
          resultButton.textContent = `${prefix} ${text}`;
          resultButton.addEventListener("click", () => {
            const targetHash = `#${id}`;
            if (typeof history !== "undefined" && history.replaceState) {
              history.replaceState(null, "", targetHash);
            } else {
              document.location.hash = targetHash;
            }
            heading.scrollIntoView({ behavior: "smooth", block: "start" });
            setTimeout(() => heading.focus(), 120);
            closePanel();
            button.focus();
          });

          item.appendChild(resultButton);
          return item;
        });

        items.forEach((item) => list.appendChild(item));

        function closePanel() {
          panel.hidden = true;
          button.setAttribute("aria-expanded", "false");
        }

        function openPanel() {
          panel.hidden = false;
          button.setAttribute("aria-expanded", "true");
          searchInput.focus();
          searchInput.select();
        }

        button.addEventListener("click", () => {
          if (panel.hidden) {
            openPanel();
          } else {
            closePanel();
          }
        });

        searchInput.addEventListener("input", () => {
          const term = searchInput.value.trim().toLowerCase();
          items.forEach((item) => {
            const matches =
              !term || item.dataset.search?.includes(term) === true;
            item.hidden = !matches;
          });
        });

        searchInput.addEventListener("keydown", (event) => {
          if (event.key === "Escape") {
            closePanel();
            button.focus();
          }
        });

        document.addEventListener("click", (event) => {
          if (panel.hidden) return;
          if (!filter.contains(event.target)) {
            closePanel();
          }
        });
      });
    })();
  </script>
  <script
    id="content-language-data"
    type="application/json"
    set:html={languageToggleData}
  />
  <script is:inline>
    (() => {
      const dataElement = document.querySelector("#content-language-data");
      const toggle = document.querySelector("#content-language-toggle");
      const article = document.querySelector(".markdown-body");
      const titleElement = document.querySelector("[data-i18n-title]");
      const descriptionElement = document.querySelector(
        "[data-i18n-description]",
      );
      const languageLabel = document.querySelector(
        "[data-i18n-language-label]",
      );

      if (!dataElement || !toggle || !article) {
        return;
      }

      let payload = {};
      try {
        payload = JSON.parse(dataElement.textContent || "{}");
      } catch (error) {
        console.error("Failed to parse language payload", error);
        return;
      }

      const {
        languages = [],
        defaultLanguage = "id",
        title = {},
        description = {},
        copy = {},
        buttonClasses = {},
      } = payload;

      const sections = Array.from(article.querySelectorAll("[data-lang]"));
      const fallbackLanguage =
        languages[0]?.code ||
        defaultLanguage ||
        sections[0]?.getAttribute("data-lang") ||
        "id";
      const storageKey = "preferred-language";

      const detectPreferredLanguage = () => {
        if (typeof navigator === "undefined") {
          return null;
        }

        const available = languages.map((lang) => lang.code.toLowerCase());
        const candidates =
          Array.isArray(navigator.languages) && navigator.languages.length
            ? navigator.languages
            : [navigator.language];

        for (const candidate of candidates) {
          if (!candidate) continue;
          const normalized = candidate.toLowerCase();
          const exact = available.find((code) => normalized === code);
          if (exact) {
            return exact;
          }
          const partial = available.find((code) => normalized.startsWith(`${code}-`));
          if (partial) {
            return partial;
          }
        }

        return null;
      };

      let activeLanguage = defaultLanguage;
      if (typeof window !== "undefined") {
        try {
          const stored = window.localStorage?.getItem(storageKey);
          if (stored && languages.some((lang) => lang.code === stored)) {
            activeLanguage = stored;
          } else {
            const detected = detectPreferredLanguage();
            if (detected && languages.some((lang) => lang.code === detected)) {
              activeLanguage = detected;
            }
          }
        } catch (error) {
          console.warn("Unable to read stored language", error);
        }
      }

      const translateEntry = (entry) =>
        entry?.[activeLanguage] ??
        entry?.[fallbackLanguage] ??
        Object.values(entry ?? {})[0] ??
        "";

      const baseClass = buttonClasses.base ?? "";
      const activeClass = buttonClasses.active ?? "";
      const inactiveClass = buttonClasses.inactive ?? "";

      const updateButtons = () => {
        toggle.querySelectorAll("[data-lang]").forEach((button) => {
          const lang = button.getAttribute("data-lang");
          const isActive = lang === activeLanguage;
          const buttonBase =
            button.getAttribute("data-base-class") || baseClass;
          button.className =
            `${buttonBase} ${isActive ? activeClass : inactiveClass}`.trim();
          button.setAttribute("aria-pressed", String(isActive));
        });
      };

      const updateStaticText = () => {
        if (titleElement) {
          const value = translateEntry(title);
          if (value) {
            titleElement.textContent = value;
          }
        }
        if (descriptionElement) {
          const value = translateEntry(description);
          if (value) {
            descriptionElement.textContent = value;
            descriptionElement.hidden = false;
          } else {
            descriptionElement.hidden = true;
          }
        }
        if (languageLabel) {
          languageLabel.textContent = translateEntry(
            copy.languageToggleLabel ?? {},
          );
        }
      };

      const applyLanguage = () => {
        sections.forEach((section) => {
          const lang = section.getAttribute("data-lang");
          section.hidden = lang !== activeLanguage;
        });
        updateStaticText();
        updateButtons();
        if (typeof window !== "undefined") {
          try {
            window.localStorage?.setItem(storageKey, activeLanguage);
          } catch (error) {
            console.warn("Unable to persist language preference", error);
          }
        }
      };

      updateButtons();
      updateStaticText();
      applyLanguage();

      toggle.querySelectorAll("[data-lang]").forEach((button) => {
        button.addEventListener("click", () => {
          const lang = button.getAttribute("data-lang");
          if (!lang || lang === activeLanguage) {
            return;
          }
          activeLanguage = lang;
          applyLanguage();
        });
      });
    })();
  </script>
</Layout>
